name: CI Build

on:
  pull_request:
  push:
    branches:
      - "**"
    tags-ignore:
      - "**"

defaults:
  run:
    shell: bash

jobs:
  build:
    name: Build matrix
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os:
          - "ubuntu-latest"
          - "macos-latest"
          - "windows-latest"
        python-version:
          - "3.10"
          - "3.13"
    env:
      last_python_version: "3.13"
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{matrix.python-version}}

      - uses: snok/install-poetry@v1.3.3
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true
          virtualenvs-path: .venv
          installer-parallel: true          

      - name: Check pyproject.toml validity
        run: poetry check --no-interaction

      - name: Cache dependencies
        id: cache-deps
        uses: actions/cache@v4
        with:
          path: .venv
          key: ${{ matrix.os }}-${{ hashFiles('**/poetry.lock') }}
          restore-keys: ${{ matrix.os }}-

      - name: Setup GLPK on ubuntu
        if: matrix.os == 'ubuntu-latest'
        run: sudo apt-get install glpk-utils

      - name: Setup GLPK on macos
        if: matrix.os == 'macos-latest'
        run: brew install glpk

      - name: Setup GLPK on Windows
        if: matrix.os == 'windows-latest'
        run: choco install glpk
        shell: bash

      - name: Install deps
        if: steps.cache-deps.cache-hit != 'true'
        run: poetry install --no-interaction

      - name: Run tests
        run: poetry run pytest -v

      - name: Run notebook tests (ubuntu latest only)
        if: (matrix.os == 'ubuntu-latest') && (matrix.python-version ==env.last_python_version)
        run: poetry run pytest -v --nbmake -k ipynb

      - name: Build artifacts
        run: poetry build
